// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             Int              @id @default(autoincrement())
  username       String           @unique
  email          String           @unique
  password       String
  firstName      String?
  lastName       String?
  posts          Post[]
  comments       Comment[]
  color          String
  publisher      Boolean          @default(false)
  userId         Int?
  CommentLike    CommentLike[]
  CommentDislike CommentDislike[]
  PostLike       PostLike[]
  PostDislike    PostDislike[]
  followers      Follows[]        @relation("following")
  following      Follows[]        @relation("follower")
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int

  @@id([followerId, followingId])
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  description String?
  thumbnail   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  comments    Comment[]
}

model Comment {
  id          Int              @id @default(autoincrement())
  message     String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id])
  userId      Int
  post        Post             @relation(fields: [postId], references: [id])
  postId      Int
  parent      Comment?         @relation("Comment_Children", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[]        @relation("Comment_Children")
  parentId    Int?
  likes       CommentLike[]
  dislikes    CommentDislike[]
  PostLike    PostLike[]
  PostDislike PostDislike[]
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
}

model CommentDislike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
}

model PostLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
}

model PostDislike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
}
